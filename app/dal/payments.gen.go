// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dwikiramadhan/money-transaction-api/app/model"
)

func newPayment(db *gorm.DB, opts ...gen.DOOption) payment {
	_payment := payment{}

	_payment.paymentDo.UseDB(db, opts...)
	_payment.paymentDo.UseModel(&model.Payment{})

	tableName := _payment.paymentDo.TableName()
	_payment.ALL = field.NewAsterisk(tableName)
	_payment.ID = field.NewInt32(tableName, "id")
	_payment.PaymentID = field.NewString(tableName, "payment_id")
	_payment.UserID = field.NewString(tableName, "user_id")
	_payment.Amount = field.NewInt32(tableName, "amount")
	_payment.Remarks = field.NewString(tableName, "remarks")
	_payment.BalanceBefore = field.NewInt32(tableName, "balance_before")
	_payment.BalanceAfter = field.NewInt32(tableName, "balance_after")
	_payment.CreatedDate = field.NewTime(tableName, "created_date")

	_payment.fillFieldMap()

	return _payment
}

type payment struct {
	paymentDo

	ALL           field.Asterisk
	ID            field.Int32
	PaymentID     field.String
	UserID        field.String
	Amount        field.Int32
	Remarks       field.String
	BalanceBefore field.Int32
	BalanceAfter  field.Int32
	CreatedDate   field.Time

	fieldMap map[string]field.Expr
}

func (p payment) Table(newTableName string) *payment {
	p.paymentDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p payment) As(alias string) *payment {
	p.paymentDo.DO = *(p.paymentDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *payment) updateTableName(table string) *payment {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.PaymentID = field.NewString(table, "payment_id")
	p.UserID = field.NewString(table, "user_id")
	p.Amount = field.NewInt32(table, "amount")
	p.Remarks = field.NewString(table, "remarks")
	p.BalanceBefore = field.NewInt32(table, "balance_before")
	p.BalanceAfter = field.NewInt32(table, "balance_after")
	p.CreatedDate = field.NewTime(table, "created_date")

	p.fillFieldMap()

	return p
}

func (p *payment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *payment) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["payment_id"] = p.PaymentID
	p.fieldMap["user_id"] = p.UserID
	p.fieldMap["amount"] = p.Amount
	p.fieldMap["remarks"] = p.Remarks
	p.fieldMap["balance_before"] = p.BalanceBefore
	p.fieldMap["balance_after"] = p.BalanceAfter
	p.fieldMap["created_date"] = p.CreatedDate
}

func (p payment) clone(db *gorm.DB) payment {
	p.paymentDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p payment) replaceDB(db *gorm.DB) payment {
	p.paymentDo.ReplaceDB(db)
	return p
}

type paymentDo struct{ gen.DO }

func (p paymentDo) Debug() *paymentDo {
	return p.withDO(p.DO.Debug())
}

func (p paymentDo) WithContext(ctx context.Context) *paymentDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p paymentDo) ReadDB() *paymentDo {
	return p.Clauses(dbresolver.Read)
}

func (p paymentDo) WriteDB() *paymentDo {
	return p.Clauses(dbresolver.Write)
}

func (p paymentDo) Session(config *gorm.Session) *paymentDo {
	return p.withDO(p.DO.Session(config))
}

func (p paymentDo) Clauses(conds ...clause.Expression) *paymentDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p paymentDo) Returning(value interface{}, columns ...string) *paymentDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p paymentDo) Not(conds ...gen.Condition) *paymentDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p paymentDo) Or(conds ...gen.Condition) *paymentDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p paymentDo) Select(conds ...field.Expr) *paymentDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p paymentDo) Where(conds ...gen.Condition) *paymentDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p paymentDo) Order(conds ...field.Expr) *paymentDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p paymentDo) Distinct(cols ...field.Expr) *paymentDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p paymentDo) Omit(cols ...field.Expr) *paymentDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p paymentDo) Join(table schema.Tabler, on ...field.Expr) *paymentDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p paymentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *paymentDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p paymentDo) RightJoin(table schema.Tabler, on ...field.Expr) *paymentDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p paymentDo) Group(cols ...field.Expr) *paymentDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p paymentDo) Having(conds ...gen.Condition) *paymentDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p paymentDo) Limit(limit int) *paymentDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p paymentDo) Offset(offset int) *paymentDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p paymentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *paymentDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p paymentDo) Unscoped() *paymentDo {
	return p.withDO(p.DO.Unscoped())
}

func (p paymentDo) Create(values ...*model.Payment) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p paymentDo) CreateInBatches(values []*model.Payment, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p paymentDo) Save(values ...*model.Payment) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p paymentDo) First() (*model.Payment, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Payment), nil
	}
}

func (p paymentDo) Take() (*model.Payment, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Payment), nil
	}
}

func (p paymentDo) Last() (*model.Payment, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Payment), nil
	}
}

func (p paymentDo) Find() ([]*model.Payment, error) {
	result, err := p.DO.Find()
	return result.([]*model.Payment), err
}

func (p paymentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Payment, err error) {
	buf := make([]*model.Payment, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p paymentDo) FindInBatches(result *[]*model.Payment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p paymentDo) Attrs(attrs ...field.AssignExpr) *paymentDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p paymentDo) Assign(attrs ...field.AssignExpr) *paymentDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p paymentDo) Joins(fields ...field.RelationField) *paymentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p paymentDo) Preload(fields ...field.RelationField) *paymentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p paymentDo) FirstOrInit() (*model.Payment, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Payment), nil
	}
}

func (p paymentDo) FirstOrCreate() (*model.Payment, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Payment), nil
	}
}

func (p paymentDo) FindByPage(offset int, limit int) (result []*model.Payment, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p paymentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p paymentDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p paymentDo) Delete(models ...*model.Payment) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *paymentDo) withDO(do gen.Dao) *paymentDo {
	p.DO = *do.(*gen.DO)
	return p
}
