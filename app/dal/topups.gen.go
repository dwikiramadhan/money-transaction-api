// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dwikiramadhan/money-transaction-api/app/model"
)

func newTopup(db *gorm.DB, opts ...gen.DOOption) topup {
	_topup := topup{}

	_topup.topupDo.UseDB(db, opts...)
	_topup.topupDo.UseModel(&model.Topup{})

	tableName := _topup.topupDo.TableName()
	_topup.ALL = field.NewAsterisk(tableName)
	_topup.ID = field.NewInt32(tableName, "id")
	_topup.TopUpID = field.NewString(tableName, "top_up_id")
	_topup.UserID = field.NewString(tableName, "user_id")
	_topup.AmountTopUp = field.NewInt32(tableName, "amount_top_up")
	_topup.BalanceBefore = field.NewInt32(tableName, "balance_before")
	_topup.BalanceAfter = field.NewInt32(tableName, "balance_after")
	_topup.CreatedDate = field.NewTime(tableName, "created_date")
	_topup.UpdatedDate = field.NewTime(tableName, "updated_date")

	_topup.fillFieldMap()

	return _topup
}

type topup struct {
	topupDo

	ALL           field.Asterisk
	ID            field.Int32
	TopUpID       field.String
	UserID        field.String
	AmountTopUp   field.Int32
	BalanceBefore field.Int32
	BalanceAfter  field.Int32
	CreatedDate   field.Time
	UpdatedDate   field.Time

	fieldMap map[string]field.Expr
}

func (t topup) Table(newTableName string) *topup {
	t.topupDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t topup) As(alias string) *topup {
	t.topupDo.DO = *(t.topupDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *topup) updateTableName(table string) *topup {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.TopUpID = field.NewString(table, "top_up_id")
	t.UserID = field.NewString(table, "user_id")
	t.AmountTopUp = field.NewInt32(table, "amount_top_up")
	t.BalanceBefore = field.NewInt32(table, "balance_before")
	t.BalanceAfter = field.NewInt32(table, "balance_after")
	t.CreatedDate = field.NewTime(table, "created_date")
	t.UpdatedDate = field.NewTime(table, "updated_date")

	t.fillFieldMap()

	return t
}

func (t *topup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *topup) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.ID
	t.fieldMap["top_up_id"] = t.TopUpID
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["amount_top_up"] = t.AmountTopUp
	t.fieldMap["balance_before"] = t.BalanceBefore
	t.fieldMap["balance_after"] = t.BalanceAfter
	t.fieldMap["created_date"] = t.CreatedDate
	t.fieldMap["updated_date"] = t.UpdatedDate
}

func (t topup) clone(db *gorm.DB) topup {
	t.topupDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t topup) replaceDB(db *gorm.DB) topup {
	t.topupDo.ReplaceDB(db)
	return t
}

type topupDo struct{ gen.DO }

func (t topupDo) Debug() *topupDo {
	return t.withDO(t.DO.Debug())
}

func (t topupDo) WithContext(ctx context.Context) *topupDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t topupDo) ReadDB() *topupDo {
	return t.Clauses(dbresolver.Read)
}

func (t topupDo) WriteDB() *topupDo {
	return t.Clauses(dbresolver.Write)
}

func (t topupDo) Session(config *gorm.Session) *topupDo {
	return t.withDO(t.DO.Session(config))
}

func (t topupDo) Clauses(conds ...clause.Expression) *topupDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t topupDo) Returning(value interface{}, columns ...string) *topupDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t topupDo) Not(conds ...gen.Condition) *topupDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t topupDo) Or(conds ...gen.Condition) *topupDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t topupDo) Select(conds ...field.Expr) *topupDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t topupDo) Where(conds ...gen.Condition) *topupDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t topupDo) Order(conds ...field.Expr) *topupDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t topupDo) Distinct(cols ...field.Expr) *topupDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t topupDo) Omit(cols ...field.Expr) *topupDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t topupDo) Join(table schema.Tabler, on ...field.Expr) *topupDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t topupDo) LeftJoin(table schema.Tabler, on ...field.Expr) *topupDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t topupDo) RightJoin(table schema.Tabler, on ...field.Expr) *topupDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t topupDo) Group(cols ...field.Expr) *topupDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t topupDo) Having(conds ...gen.Condition) *topupDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t topupDo) Limit(limit int) *topupDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t topupDo) Offset(offset int) *topupDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t topupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *topupDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t topupDo) Unscoped() *topupDo {
	return t.withDO(t.DO.Unscoped())
}

func (t topupDo) Create(values ...*model.Topup) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t topupDo) CreateInBatches(values []*model.Topup, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t topupDo) Save(values ...*model.Topup) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t topupDo) First() (*model.Topup, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Topup), nil
	}
}

func (t topupDo) Take() (*model.Topup, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Topup), nil
	}
}

func (t topupDo) Last() (*model.Topup, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Topup), nil
	}
}

func (t topupDo) Find() ([]*model.Topup, error) {
	result, err := t.DO.Find()
	return result.([]*model.Topup), err
}

func (t topupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Topup, err error) {
	buf := make([]*model.Topup, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t topupDo) FindInBatches(result *[]*model.Topup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t topupDo) Attrs(attrs ...field.AssignExpr) *topupDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t topupDo) Assign(attrs ...field.AssignExpr) *topupDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t topupDo) Joins(fields ...field.RelationField) *topupDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t topupDo) Preload(fields ...field.RelationField) *topupDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t topupDo) FirstOrInit() (*model.Topup, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Topup), nil
	}
}

func (t topupDo) FirstOrCreate() (*model.Topup, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Topup), nil
	}
}

func (t topupDo) FindByPage(offset int, limit int) (result []*model.Topup, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t topupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t topupDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t topupDo) Delete(models ...*model.Topup) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *topupDo) withDO(do gen.Dao) *topupDo {
	t.DO = *do.(*gen.DO)
	return t
}
