// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dwikiramadhan/money-transaction-api/app/model"
)

func newTransfer(db *gorm.DB, opts ...gen.DOOption) transfer {
	_transfer := transfer{}

	_transfer.transferDo.UseDB(db, opts...)
	_transfer.transferDo.UseModel(&model.Transfer{})

	tableName := _transfer.transferDo.TableName()
	_transfer.ALL = field.NewAsterisk(tableName)
	_transfer.ID = field.NewInt32(tableName, "id")
	_transfer.TransferID = field.NewString(tableName, "transfer_id")
	_transfer.UserID = field.NewString(tableName, "user_id")
	_transfer.Amount = field.NewInt32(tableName, "amount")
	_transfer.Remarks = field.NewString(tableName, "remarks")
	_transfer.BalanceBefore = field.NewInt32(tableName, "balance_before")
	_transfer.BalanceAfter = field.NewInt32(tableName, "balance_after")
	_transfer.CreatedDate = field.NewTime(tableName, "created_date")

	_transfer.fillFieldMap()

	return _transfer
}

type transfer struct {
	transferDo

	ALL           field.Asterisk
	ID            field.Int32
	TransferID    field.String
	UserID        field.String
	Amount        field.Int32
	Remarks       field.String
	BalanceBefore field.Int32
	BalanceAfter  field.Int32
	CreatedDate   field.Time

	fieldMap map[string]field.Expr
}

func (t transfer) Table(newTableName string) *transfer {
	t.transferDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t transfer) As(alias string) *transfer {
	t.transferDo.DO = *(t.transferDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *transfer) updateTableName(table string) *transfer {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.TransferID = field.NewString(table, "transfer_id")
	t.UserID = field.NewString(table, "user_id")
	t.Amount = field.NewInt32(table, "amount")
	t.Remarks = field.NewString(table, "remarks")
	t.BalanceBefore = field.NewInt32(table, "balance_before")
	t.BalanceAfter = field.NewInt32(table, "balance_after")
	t.CreatedDate = field.NewTime(table, "created_date")

	t.fillFieldMap()

	return t
}

func (t *transfer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *transfer) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.ID
	t.fieldMap["transfer_id"] = t.TransferID
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["amount"] = t.Amount
	t.fieldMap["remarks"] = t.Remarks
	t.fieldMap["balance_before"] = t.BalanceBefore
	t.fieldMap["balance_after"] = t.BalanceAfter
	t.fieldMap["created_date"] = t.CreatedDate
}

func (t transfer) clone(db *gorm.DB) transfer {
	t.transferDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t transfer) replaceDB(db *gorm.DB) transfer {
	t.transferDo.ReplaceDB(db)
	return t
}

type transferDo struct{ gen.DO }

func (t transferDo) Debug() *transferDo {
	return t.withDO(t.DO.Debug())
}

func (t transferDo) WithContext(ctx context.Context) *transferDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t transferDo) ReadDB() *transferDo {
	return t.Clauses(dbresolver.Read)
}

func (t transferDo) WriteDB() *transferDo {
	return t.Clauses(dbresolver.Write)
}

func (t transferDo) Session(config *gorm.Session) *transferDo {
	return t.withDO(t.DO.Session(config))
}

func (t transferDo) Clauses(conds ...clause.Expression) *transferDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t transferDo) Returning(value interface{}, columns ...string) *transferDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t transferDo) Not(conds ...gen.Condition) *transferDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t transferDo) Or(conds ...gen.Condition) *transferDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t transferDo) Select(conds ...field.Expr) *transferDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t transferDo) Where(conds ...gen.Condition) *transferDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t transferDo) Order(conds ...field.Expr) *transferDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t transferDo) Distinct(cols ...field.Expr) *transferDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t transferDo) Omit(cols ...field.Expr) *transferDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t transferDo) Join(table schema.Tabler, on ...field.Expr) *transferDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t transferDo) LeftJoin(table schema.Tabler, on ...field.Expr) *transferDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t transferDo) RightJoin(table schema.Tabler, on ...field.Expr) *transferDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t transferDo) Group(cols ...field.Expr) *transferDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t transferDo) Having(conds ...gen.Condition) *transferDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t transferDo) Limit(limit int) *transferDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t transferDo) Offset(offset int) *transferDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t transferDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *transferDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t transferDo) Unscoped() *transferDo {
	return t.withDO(t.DO.Unscoped())
}

func (t transferDo) Create(values ...*model.Transfer) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t transferDo) CreateInBatches(values []*model.Transfer, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t transferDo) Save(values ...*model.Transfer) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t transferDo) First() (*model.Transfer, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Transfer), nil
	}
}

func (t transferDo) Take() (*model.Transfer, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Transfer), nil
	}
}

func (t transferDo) Last() (*model.Transfer, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Transfer), nil
	}
}

func (t transferDo) Find() ([]*model.Transfer, error) {
	result, err := t.DO.Find()
	return result.([]*model.Transfer), err
}

func (t transferDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Transfer, err error) {
	buf := make([]*model.Transfer, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t transferDo) FindInBatches(result *[]*model.Transfer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t transferDo) Attrs(attrs ...field.AssignExpr) *transferDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t transferDo) Assign(attrs ...field.AssignExpr) *transferDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t transferDo) Joins(fields ...field.RelationField) *transferDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t transferDo) Preload(fields ...field.RelationField) *transferDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t transferDo) FirstOrInit() (*model.Transfer, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Transfer), nil
	}
}

func (t transferDo) FirstOrCreate() (*model.Transfer, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Transfer), nil
	}
}

func (t transferDo) FindByPage(offset int, limit int) (result []*model.Transfer, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t transferDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t transferDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t transferDo) Delete(models ...*model.Transfer) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *transferDo) withDO(do gen.Dao) *transferDo {
	t.DO = *do.(*gen.DO)
	return t
}
